main <- function(){
data = read.table('data.txt',header = TRUE);
C_rtn = data[,2];
SP_rtn = data[,3];
C_rtn_mean = mean(C_rtn);
SP_rtn_mean = mean(SP_rtn);
C_rtn_var = var(C_rtn);
SP_rtn_var = var(SP_rtn);
C_rtn_Kurtosis = mean((C_rtn-C_rtn_mean)^4)/(C_rtn_var^2);
SP_rtn_Kurtosis = mean((SP_rtn-SP_rtn_mean)^4)/(SP_rtn_var^2);
print(C_rtn_Kurtosis);
print(SP_rtn_Kurtosis);
}
main();
sample = generate_weibull(20,2,1);
generate_weibull <- function(n,shape,scale){
rand = (-1*log(runif(n)))^(1/shape) / scale;
return(rand);
}
density_weibull <- function(x,shape,scale)
{
density = shape*(scale^shape)*(x^(shape-1))*exp(-1*((x*scale)^shape));
return(density);
}
likelihood <- function(param){
a = param[1]; #shape
b = param[2]; #scale
likelihood = 1;
sample = generate_weibull(20,a,b);
for(i in 1:20)
{
likelihood = likelihood*(density_weibull(sample[i],a,b));
}
return(log(likelihood));
}
main <- function(){
library(numDeriv);
H <- hessian(likelihood, x = c(2,1), method="complex", method.args=list());
r = eigen(H,only.values=TRUE);
eig = r$values;
print(eig);
unique = TRUE;
for(i in 1:2)
{
if(Re(eig[i])>=0){
unique = FALSE;
break;
}
}
if(unique){
print("There is a unique maximum");
}
else{
print("There is no unique maximum");
}
}
main();
Q
Q
install.packages("numDeriv")
sample = generate_weibull(20,2,1);
generate_weibull <- function(n,shape,scale){
rand = (-1*log(runif(n)))^(1/shape) / scale;
return(rand);
}
density_weibull <- function(x,shape,scale)
{
density = shape*(scale^shape)*(x^(shape-1))*exp(-1*((x*scale)^shape));
return(density);
}
likelihood <- function(param){
a = param[1]; #shape
b = param[2]; #scale
likelihood = 1;
sample = generate_weibull(20,a,b);
for(i in 1:20)
{
likelihood = likelihood*(density_weibull(sample[i],a,b));
}
return(log(likelihood));
}
main <- function(){
library(numDeriv);
H <- hessian(likelihood, x = c(2,1), method="complex", method.args=list());
r = eigen(H,only.values=TRUE);
eig = r$values;
print(eig);
unique = TRUE;
for(i in 1:2)
{
if(Re(eig[i])>=0){
unique = FALSE;
break;
}
}
if(unique){
print("There is a unique maximum");
}
else{
print("There is no unique maximum");
}
}
main();
sample = generate_weibull(20,2,1);
generate_weibull <- function(n,shape,scale){
rand = (-1*log(runif(n)))^(1/shape) / scale;
return(rand);
}
density_weibull <- function(x,shape,scale)
{
density = shape*(scale^shape)*(x^(shape-1))*exp(-1*((x*scale)^shape));
return(density);
}
likelihood <- function(param){
a = param[1]; #shape
b = param[2]; #scale
likelihood = 1;
sample = generate_weibull(20,a,b);
for(i in 1:20)
{
likelihood = likelihood*(density_weibull(sample[i],a,b));
}
return(log(likelihood));
}
main <- function(){
library(numDeriv);
H <- hessian(likelihood, x = c(2,1), method="complex", method.args=list());
r = eigen(H,only.values=TRUE);
eig = r$values;
print(eig);
unique = TRUE;
for(i in 1:2)
{
if(Re(eig[i])>=0){
unique = FALSE;
break;
}
}
if(unique){
print("There is a unique maximum");
}
else{
print("There is no unique maximum");
}
}
main();
sample = generate_weibull(20,2,1);
generate_weibull <- function(n,shape,scale){
rand = (-1*log(runif(n)))^(1/shape) / scale;
return(rand);
}
density_weibull <- function(x,shape,scale)
{
density = shape*(scale^shape)*(x^(shape-1))*exp(-1*((x*scale)^shape));
return(density);
}
likelihood <- function(param){
a = param[1]; #shape
b = param[2]; #scale
likelihood = 1;
for(i in 1:20)
{
likelihood = likelihood*(density_weibull(sample[i],a,b));
}
return(log(likelihood));
}
norm_vec <- function(x){
return(sqrt(sum(x^2)));
}
findInitialChoice <- function(){
#library(rgl);
shape = 1:0.01:100;
scale = 0.5:0.01:100;
z = outer(shape,scale,likelihood)
print(z);
#contour(shape,scale,z,nlevels = 10)
persp(shape,scale,z,expand = 0.5, col = "lightblue",ticktype="detailed")
}
findMLE <- function(TOL){
library(numDeriv);
library(MASS);
x0 = c(2.2,1.1);
oldParam = x0;
H = hessian(likelihood, x = oldParam, method="complex", method.args=list());
gradient = grad(likelihood, x = oldParam, method="complex", method.args=list());
newParam = oldParam - (solve(H) %*% gradient);
while(norm_vec(gradient)>=TOL){
oldParam = newParam;
H = hessian(likelihood, x = oldParam, method="complex", method.args=list());
gradient = grad(likelihood, x = oldParam, method="complex", method.args=list());
newParam = oldParam - (solve(H) %*% gradient);
}
return(newParam);
}
mle = findMLE(0.0001);
print(mle);
#findInitialChoice();
sample = generate_weibull(20,2,1);
generate_weibull <- function(n,shape,scale){
rand = (-1*log(runif(n)))^(1/shape) / scale;
return(rand);
}
density_weibull <- function(x,shape,scale)
{
density = shape*(scale^shape)*(x^(shape-1))*exp(-1*((x*scale)^shape));
return(density);
}
likelihood <- function(param){
a = param[1]; #shape
b = param[2]; #scale
likelihood = 1;
for(i in 1:20)
{
likelihood = likelihood*(density_weibull(sample[i],a,b));
}
return(log(likelihood));
}
norm_vec <- function(x){
return(sqrt(sum(x^2)));
}
findInitialChoice <- function(){
#library(rgl);
shape = 1:0.01:100;
scale = 0.5:0.01:100;
z = outer(shape,scale,likelihood)
print(z);
#contour(shape,scale,z,nlevels = 10)
persp(shape,scale,z,expand = 0.5, col = "lightblue",ticktype="detailed")
}
findMLE <- function(TOL){
library(numDeriv);
library(MASS);
x0 = c(2.2,1.1);
oldParam = x0;
H = hessian(likelihood, x = oldParam, method="complex", method.args=list());
gradient = grad(likelihood, x = oldParam, method="complex", method.args=list());
newParam = oldParam - (solve(H) %*% gradient);
while(norm_vec(gradient)>=TOL){
oldParam = newParam;
H = hessian(likelihood, x = oldParam, method="complex", method.args=list());
gradient = grad(likelihood, x = oldParam, method="complex", method.args=list());
newParam = oldParam - (solve(H) %*% gradient);
}
return(newParam);
}
mle = findMLE(0.0001);
print(mle);
#findInitialChoice();
sample = generate_weibull(20,2,1);
generate_weibull <- function(n,shape,scale){
rand = (-1*log(runif(n)))^(1/shape) / scale;
return(rand);
}
density_weibull <- function(x,shape,scale)
{
density = shape*(scale^shape)*(x^(shape-1))*exp(-1*((x*scale)^shape));
return(density);
}
likelihood <- function(param){
a = param[1]; #shape
b = param[2]; #scale
likelihood = 1;
for(i in 1:20)
{
likelihood = likelihood*(density_weibull(sample[i],a,b));
}
return(log(likelihood));
}
norm_vec <- function(x){
return(sqrt(sum(x^2)));
}
findInitialChoice <- function(){
#library(rgl);
shape = 1:0.01:100;
scale = 0.5:0.01:100;
z = outer(shape,scale,likelihood)
print(z);
#contour(shape,scale,z,nlevels = 10)
persp(shape,scale,z,expand = 0.5, col = "lightblue",ticktype="detailed")
}
findMLE <- function(TOL){
library(numDeriv);
library(MASS);
x0 = c(2.2,1.5);
oldParam = x0;
H = hessian(likelihood, x = oldParam, method="complex", method.args=list());
gradient = grad(likelihood, x = oldParam, method="complex", method.args=list());
newParam = oldParam - (solve(H) %*% gradient);
while(norm_vec(gradient)>=TOL){
oldParam = newParam;
H = hessian(likelihood, x = oldParam, method="complex", method.args=list());
gradient = grad(likelihood, x = oldParam, method="complex", method.args=list());
newParam = oldParam - (solve(H) %*% gradient);
}
return(newParam);
}
mle = findMLE(0.0001);
print(mle);
#findInitialChoice();
sample = generate_weibull(20,2,1);
generate_weibull <- function(n,shape,scale){
rand = (-1*log(runif(n)))^(1/shape) / scale;
return(rand);
}
density_weibull <- function(x,shape,scale)
{
density = shape*(scale^shape)*(x^(shape-1))*exp(-1*((x*scale)^shape));
return(density);
}
likelihood <- function(param){
a = param[1]; #shape
b = param[2]; #scale
likelihood = 1;
for(i in 1:20)
{
likelihood = likelihood*(density_weibull(sample[i],a,b));
}
return(log(likelihood));
}
norm_vec <- function(x){
return(sqrt(sum(x^2)));
}
findInitialChoice <- function(){
#library(rgl);
shape = 1:0.01:100;
scale = 0.5:0.01:100;
z = outer(shape,scale,likelihood)
print(z);
#contour(shape,scale,z,nlevels = 10)
persp(shape,scale,z,expand = 0.5, col = "lightblue",ticktype="detailed")
}
findMLE <- function(TOL){
library(numDeriv);
library(MASS);
x0 = c(2.2,1.0);
oldParam = x0;
H = hessian(likelihood, x = oldParam, method="complex", method.args=list());
gradient = grad(likelihood, x = oldParam, method="complex", method.args=list());
newParam = oldParam - (solve(H) %*% gradient);
while(norm_vec(gradient)>=TOL){
oldParam = newParam;
H = hessian(likelihood, x = oldParam, method="complex", method.args=list());
gradient = grad(likelihood, x = oldParam, method="complex", method.args=list());
newParam = oldParam - (solve(H) %*% gradient);
}
return(newParam);
}
mle = findMLE(0.0001);
print(mle);
#findInitialChoice();
